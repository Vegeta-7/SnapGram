shadcn provides its components  -->  No code added only adds the code of the component we need.

Zod is a TypeScript-first schema declaration and validation library. I'm using the term "schema" to broadly refer to any data type, from a simple string to a complex nested object.

check toast in shadcn

TanStack Query is a data fetching and mutation library for react while giving benefits like caching, infinite scroll

CreateContext : In React, the createContext function is used to create a context object. A context in React provides a way to share values like props between components without explicitly passing those values through each level of the component tree.


In simple terms, QueryClientProvider is a component provided by the React Query library that helps manage and share data-fetching logic (queries) throughout your React application.
When you use React Query, you often create an instance of QueryClient to manage your queries and cache. The QueryClientProvider wraps your entire application and makes this QueryClient instance available to all components within its scope.
So, the QueryClientProvider is like a context provider that ensures any part of your React app can access the shared query client. This is useful because it allows you to centralize and coordinate data fetching, caching, and state management related to API calls in a consistent way across your application.


react-dropzone --> used to drop images in create post

QueryClient is used due to one of its functionalities mentioned below
Get Query State: You can get the current state of a query, such as whether it is loading, has data, or has encountered an error.

.line-clamp-1 {
    overflow: hidden;   This property specifies that any content that overflows the element's box should be hidden. In this context, it ensures that any text content exceeding the specified number of lines will be hidden from view.
    display: -webkit-box;    This property is a vendor-specific extension for older versions of WebKit-based browsers (such as Safari and older versions of Chrome). It specifies the display behavior of the element as a flex container using the -webkit-box value. It's used for its support of the -webkit-line-clamp property.
    -webkit-box-orient: vertical;   This property, used in conjunction with -webkit-box, specifies the orientation of the flex container's main axis. In this case, it sets the main axis to be vertical, meaning that the text content will be laid out vertically.
    -webkit-line-clamp: 1;   This property, also a vendor-specific extension, specifies the maximum number of lines of text that the element should display. In this case, it limits the text content to just one line. Any text beyond the first line will be truncated (cut off) and hidden from view.
}